CREATE DATABASE ESTUDOS
GO
USE ESTUDOS;
CREATE TABLE PRODUTOS(
    IDPRODUTO INT IDENTITY PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    CATEGORIA VARCHAR(30) NOT NULL,
    PRECO NUMERIC(10,2) NOT NULL
)
GO

USE ESTUDOS;
CREATE TABLE HISTORICO(
    IDOPERCAAO INT IDENTITY PRIMARY KEY,
    PRODUTO VARCHAR(50) NOT NULL,
    CATEGORIA VARCHAR(30) NOT NULL,
    PRECOANTIGO NUMERIC(10,2) NOT NULL,
    PRECONOVO NUMERIC(10,2) NOT NULL,
    DATA DATETIME,
    USUARIO VARCHAR(30),
    MENSAGEM VARCHAR(100)
)

DROP TABLE HISTORICO

INSERT INTO PRODUTOS VALUES('LIVRO SQL','LIVROS',98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE','LIVROS',50.00)
INSERT INTO PRODUTOS VALUES('LICENÃ‡A POWERCENTER','SOFTWARE',450000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7','computadores',3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO business intelligence','LIVROS',90.00)

select * from PRODUTOS
select * from HISTORICO

--VERIFICANDO O USUARIO

SELECT SUSER_NAME()
GO

--TRIGGER DE DATA MANIPULATION LANGUAGE 
CREATE OR ALTER TRIGGER TRG_ATUALIZA_PRECO
ON PRODUTOS 
FOR UPDATE AS  
IF UPDATE(PRECO)
BEGIN
   DECLARE @IDPRODUTO INT
   DECLARE @PRODUTO VARCHAR(30)
   DECLARE @CATEGORIA VARCHAR(10)
   DECLARE @PRECO NUMERIC(10,2)
   DECLARE @PRECONOVO NUMERIC(10,2)
   DECLARE @DATA DATETIME
   DECLARE @USUARIO VARCHAR(30)
   DECLARE @ACAO VARCHAR(100)

   SELECT @IDPRODUTO = IDPRODUTO FROM inserted
   SELECT @PRODUTO = NOME FROM inserted
   SELECT @CATEGORIA = CATEGORIA FROM inserted
   SELECT @PRECO = PRECO FROM deleted
   SELECT @PRECONOVO = PRECO FROM inserted

   SET @DATA = GETDATE()
   SET @USUARIO = SUSER_NAME()
   SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

INSERT INTO HISTORICO
(PRODUTO,CATEGORIA,PRECOANTIGO,PRECONOVO,DATA,USUARIO,MENSAGEM)
VALUES
(@PRODUTO,@CATEGORIA,@PRECO,@PRECONOVO,@DATA,@USUARIO,@ACAO)

PRINT 'TRIGGER EXECUTE COM SUCESSO'
END
GO

--EXECURABDO UM UPDATE

UPDATE PRODUTOS SET PRECO = 100
WHERE IDPRODUTO = 1

UPDATE PRODUTOS SET PRECO = 300
WHERE IDPRODUTO = 2

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO

UPDATE PRODUTOS SET NOME = 'LIVRO C#'
WHERE IDPRODUTO = 1

UPDATE PRODUTOS SET NOME = 'LIVRO JAVA'
WHERE IDPRODUTO = 2

CREATE TABLE RESULTADO(
    IDRESULTADO INT PRIMARY KEY IDENTITY,
    RESULTADO INT
)
GO

INSERT INTO RESULTADO VALUES ((SELECT 10 + 10))
GO

SELECT * FROM RESULTADO
GO

--ATRIBUINDO SELECTS A VARIAVEIS = ANONIMO

DECLARE 
     @RESULTADO INT
     SET @RESULTADO = (SELECT 50 + 10)
     INSERT INTO RESULTADO VALUES(@RESULTADO)
     PRINT 'VALOR INSERIDO NA TABELA ' + @RESULTADO
     GO

 DECLARE 
     @RESULTADO INT
     SET @RESULTADO = (SELECT 50 + 50)
     INSERT INTO RESULTADO VALUES(@RESULTADO)
     PRINT 'VALOR INSERIDO NA TABELA ' + CAST(@RESULTADO AS VARCHAR)
     GO    

--TRIGGER UPDATE

CREATE  TABLE EMPREGADO(
  IDEMP INT PRIMARY KEY,
  NOME VARCHAR(30),
  SALARIO MONEY,
  IDGERENTE INT
)
GO


ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES EMPREGADO(IDEMP)
GO

INSERT INTO EMPREGADO VALUES(1,'CLARA',5000.0,NULL)
INSERT INTO EMPREGADO VALUES(2,'CELIA',4000.0,1)
INSERT INTO EMPREGADO VALUES(3,'JOAO',4000.0,1)
GO

CREATE TABLE HIST_SALARIO(
   IDEMPREGADO INT,
   ANTIGOSAL MONEY,
   NOVOSAL MONEY,
   DATA DATETIME
)
GO

CREATE OR ALTER TRIGGER TG_SALARIO
ON EMPREGADO 
FOR UPDATE AS 
IF UPDATE(SALARIO)
BEGIN
        INSERT INTO HIST_SALARIO
        (IDEMPREGADO,ANTIGOSAL,NOVOSAL,DATA)
        SELECT D.IDEMP,D.SALARIO,I.SALARIO,GETDATE()
        FROM DELETED D,INSERTED I 
        WHERE D.IDEMP = I.IDEMP

END
GO

UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1
GO
SELECT * FROM EMPREGADO

SELECT * FROM HIST_SALARIO


CREATE TABLE SALARIO_RANGE(
    MINSAL MONEY,
    MAXSAL MONEY
)
GO

INSERT INTO SALARIO_RANGE VALUES(3000.0,6000.0)
GO

CREATE OR ALTER  TRIGGER TG_RANGE
ON EMPREGADO
FOR INSERT,UPDATE
AS 
    DECLARE 
    @MINSAL MONEY,
    @MAXSAL MONEY,
    @ATUALSAL MONEY

    SELECT @MINSAL = MINSAL,@MAXSAL = MAXSAL FROM SALARIO_RANGE

    SELECT @ATUALSAL = I.SALARIO FROM INSERTED I 

IF(@ATUALSAL < @MINSAL)
    BEGIN
      
      RAISERROR('SALARIO MENOR QUE O PISO',16,1)
      ROLLBACK TRANSACTION

    END

IF(@ATUALSAL > @MAXSAL)
    BEGIN
     
      RAISERROR('SALARIO MAIOR QUE O TETO',16,1)
      ROLLBACK TRANSACTION
    END
GO


UPDATE EMPREGADO SET SALARIO = 9000
WHERE IDEMP = 1
GO

UPDATE EMPREGADO SET SALARIO = 900
WHERE IDEMP = 1
GO
--VERIFICANDO O TEXTO DE UMA TRIGGER
SP_HELPTEXT TG_RANGE
GO
